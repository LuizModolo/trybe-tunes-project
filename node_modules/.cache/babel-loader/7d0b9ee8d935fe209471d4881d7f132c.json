{"ast":null,"code":"var _jsxFileName = \"/Users/luizmodolo/trybe/projects/sd-015-a-project-trybetunes/src/pages/Album.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport Loading from '../components/Loading';\nimport MusicCard from '../components/MusicCard';\nimport getMusics from '../services/musicsAPI';\nimport { addSong } from '../services/favoriteSongsAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Album extends Component {\n  constructor() {\n    super();\n\n    this.getMusicAPI = async () => {\n      const {\n        match: {\n          params\n        }\n      } = this.props;\n      const albumSearchFull = await getMusics(params.id);\n      const albumSearch = albumSearchFull.slice(1);\n      this.setState({\n        album: albumSearch,\n        albumInfo: albumSearchFull[0],\n        loading: false\n      });\n    };\n\n    this.handleCheckbox = async ({\n      target\n    }) => {\n      this.setState({\n        loading: true\n      }, async () => {\n        const {\n          album\n        } = this.state;\n        const objMusic = album.find(music => Number(target.id) === Number(music.trackId));\n        addSong(objMusic);\n        this.setState(previus => ({\n          loading: false,\n          favoriteList: [...previus.favoriteList, objMusic]\n        }));\n      });\n    };\n\n    this.state = {\n      album: [],\n      albumInfo: {},\n      loading: true,\n      favoriteList: []\n    };\n  }\n\n  componentDidMount() {\n    this.getMusicAPI();\n  }\n\n  render() {\n    const {\n      loading,\n      album,\n      albumInfo\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"page-album\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 20\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: album[0].artworkUrl100,\n            alt: album[0].collectionName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            \"data-testid\": \"album-name\",\n            children: albumInfo.collectionName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            \"data-testid\": \"artist-name\",\n            children: albumInfo.artistName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: album.map(music => /*#__PURE__*/_jsxDEV(MusicCard, {\n            music: music,\n            funcFavSong: this.handleCheckbox\n          }, music.trackId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 38\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nAlbum.propTypes = {\n  id: PropTypes.string.isRequired,\n  match: PropTypes.objectOf(PropTypes.object).isRequired,\n  params: PropTypes.objectOf(PropTypes.object).isRequired\n};\nexport default Album;","map":{"version":3,"sources":["/Users/luizmodolo/trybe/projects/sd-015-a-project-trybetunes/src/pages/Album.jsx"],"names":["React","Component","PropTypes","Header","Loading","MusicCard","getMusics","addSong","Album","constructor","getMusicAPI","match","params","props","albumSearchFull","id","albumSearch","slice","setState","album","albumInfo","loading","handleCheckbox","target","state","objMusic","find","music","Number","trackId","previus","favoriteList","componentDidMount","render","artworkUrl100","collectionName","artistName","map","propTypes","string","isRequired","objectOf","object"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport Loading from '../components/Loading';\nimport MusicCard from '../components/MusicCard';\nimport getMusics from '../services/musicsAPI';\nimport { addSong } from '../services/favoriteSongsAPI';\n\nclass Album extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      album: [],\n      albumInfo: {},\n      loading: true,\n      favoriteList: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getMusicAPI();\n  }\n\n  getMusicAPI = async () => {\n    const { match: { params } } = this.props;\n    const albumSearchFull = await getMusics(params.id);\n    const albumSearch = albumSearchFull.slice(1);\n    this.setState({\n      album: albumSearch,\n      albumInfo: albumSearchFull[0],\n      loading: false,\n    });\n  };\n\n  handleCheckbox = async ({ target }) => {\n    this.setState(\n      { loading: true },\n      async () => {\n        const { album } = this.state;\n        const objMusic = album\n          .find((music) => Number(target.id) === Number(music.trackId));\n        addSong(objMusic);\n        this.setState((previus) => ({\n          loading: false,\n          favoriteList: [...previus.favoriteList, objMusic],\n        }));\n      },\n    );\n  }\n\n  render() {\n    const { loading, album, albumInfo } = this.state;\n    return (\n      <div data-testid=\"page-album\">\n        <Header />\n        {loading ? <Loading /> : (\n          <div>\n            <div>\n              <img src={ album[0].artworkUrl100 } alt={ album[0].collectionName } />\n              <h1 data-testid=\"album-name\">{albumInfo.collectionName}</h1>\n              <h3 data-testid=\"artist-name\">{albumInfo.artistName}</h3>\n            </div>\n            <div>\n              {album.map((music) => (<MusicCard\n                key={ music.trackId }\n                music={ music }\n                funcFavSong={ this.handleCheckbox }\n                \n              />))}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nAlbum.propTypes = {\n  id: PropTypes.string.isRequired,\n  match: PropTypes.objectOf(PropTypes.object).isRequired,\n  params: PropTypes.objectOf(PropTypes.object).isRequired,\n};\n\nexport default Album;\n"]},"metadata":{},"sourceType":"module"}